/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package easy_note_lite;
import encrypt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author raghav
 */
public class Main extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form Main
     */
    File f;
    String Password;
    public Main(String password) {
        initComponents();
        fontSize = 18;
        encKey='A';
        Password = password;
        //System.out.print(Password);
        f = new File("/F/Notes.txt");
        FileReader fPipe = null;
        if(f.exists()==false){
            //System.out.println("Creating new file.");
            try {
                f.createNewFile();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }else{
             String s = "";
            try {
                fPipe = new FileReader(f);
                int c = fPipe.read();
                while(c!=-1){
                    s+=(char)c;
                    c=fPipe.read();
                }
                jTextPane1.setText(s);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
             
        }
        saveButton.addActionListener(this);
        saveButton.setActionCommand("SaveText");
        clearButton.addActionListener(this);
        clearButton.setActionCommand("ClearText");
        encryptButton.addActionListener(this);
        encryptButton.setActionCommand("EncryptText");
        decryptButton.addActionListener(this);
        decryptButton.setActionCommand("DecryptText");
        zoomIn.addActionListener(this);
        zoomIn.setActionCommand("ZoomIn");
        zoomOut.addActionListener(this);
        zoomOut.setActionCommand("ZoomOut");
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        clearButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        zoomIn = new javax.swing.JButton();
        zoomOut = new javax.swing.JButton();
        encryptButton = new javax.swing.JButton();
        decryptButton = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        CipherSelect = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scratchpad");
        setResizable(false);

        clearButton.setText("Clear");

        saveButton.setText("Save");

        zoomIn.setText("+");

        zoomOut.setText("-");
        zoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutActionPerformed(evt);
            }
        });

        encryptButton.setText("Encrypt");

        decryptButton.setText("Decrypt");

        passwordField.setText("jPasswordField1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(zoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zoomOut, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(decryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(zoomOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zoomIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptButton)
                    .addComponent(decryptButton)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTextPane1.setColumns(20);
        jTextPane1.setLineWrap(true);
        jTextPane1.setRows(5);
        jScrollPane2.setViewportView(jTextPane1);

        CipherSelect.setMaximumRowCount(3);
        CipherSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BCipher(Text Only)", "CeaserShiftCipher", "Atabash Cipher", "Item 4" }));

        FileMenu.setText("File");
        FileMenu.setName("File"); // NOI18N

        jMenuItem1.setMnemonic('P');
        jMenuItem1.setText("Change password");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        FileMenu.add(jMenuItem1);

        jMenuBar1.add(FileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(CipherSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(CipherSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new PasswordChange(Password,this);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void zoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zoomOutActionPerformed

    int fontSize;
    char encKey;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CipherSelect;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton decryptButton;
    private javax.swing.JButton encryptButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextPane1;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton zoomIn;
    private javax.swing.JButton zoomOut;
    // End of variables declaration//GEN-END:variables
    private void saveButtonActionPerformed() {                                           
        FileWriter fPipe=null;
            try {
                fPipe= new FileWriter(f);
                String str = jTextPane1.getText();
                fPipe.write(str);
            } catch (Exception ex) {
                ex.printStackTrace();
                return;
            }finally{
                if(fPipe!=null){
                    try {
                        fPipe.close();
                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            
    }                                          

    private void clearButtonActionPerformed() {                                            
            jTextPane1.setText("");
    }                                           

    private void zoomInActionPerformed() {                                       
        jTextPane1.setFont(new java.awt.Font("Monospaced", 0, ++fontSize));
    }                                      

    private void zoomOutActionPerformed() {                                        
        jTextPane1.setFont(new java.awt.Font("Monospaced", 0, --fontSize));
    }                                       

    private void decryptButtonActionPerformed() {                                              
        String code = jTextPane1.getText();
        String encryption = CipherSelect.getItemAt(CipherSelect.getSelectedIndex());
        String message;
        if(encryption.equals("BCipher(Text Only)")){
            BCipher enc = new BCipher();
            message = enc.getMessage(code);
        }else if(encryption.equals("CeaserShiftCipher")){
            CeaserShiftCipher enc = new CeaserShiftCipher(code.charAt(0));
            message = enc.getMessage(code);
            message=message.substring(1);
        }else if(encryption.equals("Atabash Cipher")){
            AtabashCipher enc = new AtabashCipher();
            message = enc.getMessage(code);
        }else{
            return;
        }
        jTextPane1.setText(message);
    }                                             
    private void encryptButtonActionPerformed(){
        String encryption = CipherSelect.getItemAt(CipherSelect.getSelectedIndex());
	String message = jTextPane1.getText();
        String code;
        if(encryption.equals("BCipher(Text Only)")){
            BCipher enc = new BCipher();
            code = enc.getCode(message);
        }else if(encryption.equals("CeaserShiftCipher")){
            code = String.valueOf(message.charAt(0));
            encKey=message.charAt(0);
            CeaserShiftCipher enc = new CeaserShiftCipher(encKey);
            code=code+enc.getCode(message);
        }else if(encryption.equals("Atabash Cipher")){
            AtabashCipher enc = new AtabashCipher();
            code = enc.getCode(message);
        }else{
            return;
        }
	jTextPane1.setText(code);
} 
    @Override
    public void actionPerformed(ActionEvent e) {
        String cause = e.getActionCommand();; 
        char[] pass;
        String passwordGiven;
        if(cause.equals("ZoomIn")){
            zoomInActionPerformed();
            return;
        }else if(cause.equals("ZoomOut")){
            zoomOutActionPerformed();
            return;
        }
        try{
            pass = passwordField.getPassword();
            //System.out.println(pass);
            passwordGiven = String.valueOf(pass);
            //System.out.println("Given password : "+passwordGiven);
            
        }catch(Exception ex){
            new PasswordPrompt();
            return;
        }
        if(!passwordGiven.equals(this.Password)){
            //System.out.println("passwordGiven = "+passwordGiven + "and this.Password"+this.Password);
            new PasswordPrompt();
            return;
        }
        //System.out.println(cause);
        if(cause.equals("SaveText")){
            saveButtonActionPerformed();
        }else if(cause.equals("ClearText")){
            clearButtonActionPerformed();
        }else if(cause.equals("EncryptText")){
            encryptButtonActionPerformed();
        }else if(cause.equals("DecryptText")){
            decryptButtonActionPerformed();
        }
        passwordField.setText("");
    }
}
